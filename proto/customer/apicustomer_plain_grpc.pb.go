// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerConnectorClient is the client API for CustomerConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerConnectorClient interface {
	// returns a customer by UUID
	GetCustomer(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*CustomerResponse, error)
	// returns a customer for given customer Id or external customer Id
	GetCustomerById(ctx context.Context, in *CustomerEntityId, opts ...grpc.CallOption) (*CustomerResponse, error)
	// returns list of customers for given email
	GetCustomerByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*EmailResponse, error)
	// creates a new customer
	PostCustomer(ctx context.Context, in *CustomerEntity, opts ...grpc.CallOption) (*CustomerSaveResponse, error)
	// updates an existing customer
	PutCustomer(ctx context.Context, in *CustomerEntity, opts ...grpc.CallOption) (*CustomerSaveResponse, error)
	// deletes an existing customer
	DeleteCustomer(ctx context.Context, in *CustomerEntity, opts ...grpc.CallOption) (*CustomerSaveResponse, error)
}

type customerConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerConnectorClient(cc grpc.ClientConnInterface) CustomerConnectorClient {
	return &customerConnectorClient{cc}
}

func (c *customerConnectorClient) GetCustomer(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/CustomerConnector/getCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerConnectorClient) GetCustomerById(ctx context.Context, in *CustomerEntityId, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/CustomerConnector/getCustomerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerConnectorClient) GetCustomerByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/CustomerConnector/getCustomerByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerConnectorClient) PostCustomer(ctx context.Context, in *CustomerEntity, opts ...grpc.CallOption) (*CustomerSaveResponse, error) {
	out := new(CustomerSaveResponse)
	err := c.cc.Invoke(ctx, "/CustomerConnector/postCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerConnectorClient) PutCustomer(ctx context.Context, in *CustomerEntity, opts ...grpc.CallOption) (*CustomerSaveResponse, error) {
	out := new(CustomerSaveResponse)
	err := c.cc.Invoke(ctx, "/CustomerConnector/putCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerConnectorClient) DeleteCustomer(ctx context.Context, in *CustomerEntity, opts ...grpc.CallOption) (*CustomerSaveResponse, error) {
	out := new(CustomerSaveResponse)
	err := c.cc.Invoke(ctx, "/CustomerConnector/deleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerConnectorServer is the server API for CustomerConnector service.
// All implementations must embed UnimplementedCustomerConnectorServer
// for forward compatibility
type CustomerConnectorServer interface {
	// returns a customer by UUID
	GetCustomer(context.Context, *Uuid) (*CustomerResponse, error)
	// returns a customer for given customer Id or external customer Id
	GetCustomerById(context.Context, *CustomerEntityId) (*CustomerResponse, error)
	// returns list of customers for given email
	GetCustomerByEmail(context.Context, *Email) (*EmailResponse, error)
	// creates a new customer
	PostCustomer(context.Context, *CustomerEntity) (*CustomerSaveResponse, error)
	// updates an existing customer
	PutCustomer(context.Context, *CustomerEntity) (*CustomerSaveResponse, error)
	// deletes an existing customer
	DeleteCustomer(context.Context, *CustomerEntity) (*CustomerSaveResponse, error)
	mustEmbedUnimplementedCustomerConnectorServer()
}

// UnimplementedCustomerConnectorServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerConnectorServer struct {
}

func (UnimplementedCustomerConnectorServer) GetCustomer(context.Context, *Uuid) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedCustomerConnectorServer) GetCustomerById(context.Context, *CustomerEntityId) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerById not implemented")
}
func (UnimplementedCustomerConnectorServer) GetCustomerByEmail(context.Context, *Email) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByEmail not implemented")
}
func (UnimplementedCustomerConnectorServer) PostCustomer(context.Context, *CustomerEntity) (*CustomerSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCustomer not implemented")
}
func (UnimplementedCustomerConnectorServer) PutCustomer(context.Context, *CustomerEntity) (*CustomerSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCustomer not implemented")
}
func (UnimplementedCustomerConnectorServer) DeleteCustomer(context.Context, *CustomerEntity) (*CustomerSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedCustomerConnectorServer) mustEmbedUnimplementedCustomerConnectorServer() {}

// UnsafeCustomerConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerConnectorServer will
// result in compilation errors.
type UnsafeCustomerConnectorServer interface {
	mustEmbedUnimplementedCustomerConnectorServer()
}

func RegisterCustomerConnectorServer(s grpc.ServiceRegistrar, srv CustomerConnectorServer) {
	s.RegisterService(&CustomerConnector_ServiceDesc, srv)
}

func _CustomerConnector_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerConnectorServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerConnector/getCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerConnectorServer).GetCustomer(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerConnector_GetCustomerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerEntityId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerConnectorServer).GetCustomerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerConnector/getCustomerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerConnectorServer).GetCustomerById(ctx, req.(*CustomerEntityId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerConnector_GetCustomerByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerConnectorServer).GetCustomerByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerConnector/getCustomerByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerConnectorServer).GetCustomerByEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerConnector_PostCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerConnectorServer).PostCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerConnector/postCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerConnectorServer).PostCustomer(ctx, req.(*CustomerEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerConnector_PutCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerConnectorServer).PutCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerConnector/putCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerConnectorServer).PutCustomer(ctx, req.(*CustomerEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerConnector_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerConnectorServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerConnector/deleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerConnectorServer).DeleteCustomer(ctx, req.(*CustomerEntity))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerConnector_ServiceDesc is the grpc.ServiceDesc for CustomerConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CustomerConnector",
	HandlerType: (*CustomerConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCustomer",
			Handler:    _CustomerConnector_GetCustomer_Handler,
		},
		{
			MethodName: "getCustomerById",
			Handler:    _CustomerConnector_GetCustomerById_Handler,
		},
		{
			MethodName: "getCustomerByEmail",
			Handler:    _CustomerConnector_GetCustomerByEmail_Handler,
		},
		{
			MethodName: "postCustomer",
			Handler:    _CustomerConnector_PostCustomer_Handler,
		},
		{
			MethodName: "putCustomer",
			Handler:    _CustomerConnector_PutCustomer_Handler,
		},
		{
			MethodName: "deleteCustomer",
			Handler:    _CustomerConnector_DeleteCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apicustomer_plain.proto",
}
