// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdersConnectorClient is the client API for OrdersConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersConnectorClient interface {
	// returns an order order UUID
	GetOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*Response, error)
	// creates an order
	CreateOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// gets orders by statusCode
	GetOrdersByStatus(ctx context.Context, in *StatusCode, opts ...grpc.CallOption) (*Response, error)
	// returns list of orders for given customer Id or external customer Id
	GetOrdersForCustomer(ctx context.Context, in *CustomerId, opts ...grpc.CallOption) (*Response, error)
	// returns an order for given order Number or invoice Number
	GetOrdersForInvoice(ctx context.Context, in *InvoiceNumber, opts ...grpc.CallOption) (*Response, error)
	// returns the documents per order like invoice, returnslip
	GetDocumentsPerOrder(ctx context.Context, in *InvoiceNumber, opts ...grpc.CallOption) (*DocumentResponse, error)
	// returns a specific document per order like invoice, returnslip
	GetSpecificDocumentOfOrder(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	// returns the log of orderimport
	GetOrderLog(ctx context.Context, in *Search, opts ...grpc.CallOption) (*OrderLogResponse, error)
	UpdateOrderStatus(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	//checks if there are creditnotes for this position and gives the information back
	GetReturnsOfPosition(ctx context.Context, in *OrderpositionSearchRequest, opts ...grpc.CallOption) (*OrderpositionReturnsResponse, error)
	GetOrdersbyFullTextSearch(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Response, error)
}

type ordersConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersConnectorClient(cc grpc.ClientConnInterface) OrdersConnectorClient {
	return &ordersConnectorClient{cc}
}

func (c *ordersConnectorClient) GetOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/OrdersConnector/getOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersConnectorClient) CreateOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/OrdersConnector/createOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersConnectorClient) GetOrdersByStatus(ctx context.Context, in *StatusCode, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/OrdersConnector/getOrdersByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersConnectorClient) GetOrdersForCustomer(ctx context.Context, in *CustomerId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/OrdersConnector/getOrdersForCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersConnectorClient) GetOrdersForInvoice(ctx context.Context, in *InvoiceNumber, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/OrdersConnector/getOrdersForInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersConnectorClient) GetDocumentsPerOrder(ctx context.Context, in *InvoiceNumber, opts ...grpc.CallOption) (*DocumentResponse, error) {
	out := new(DocumentResponse)
	err := c.cc.Invoke(ctx, "/OrdersConnector/getDocumentsPerOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersConnectorClient) GetSpecificDocumentOfOrder(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/OrdersConnector/getSpecificDocumentOfOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersConnectorClient) GetOrderLog(ctx context.Context, in *Search, opts ...grpc.CallOption) (*OrderLogResponse, error) {
	out := new(OrderLogResponse)
	err := c.cc.Invoke(ctx, "/OrdersConnector/getOrderLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersConnectorClient) UpdateOrderStatus(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/OrdersConnector/updateOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersConnectorClient) GetReturnsOfPosition(ctx context.Context, in *OrderpositionSearchRequest, opts ...grpc.CallOption) (*OrderpositionReturnsResponse, error) {
	out := new(OrderpositionReturnsResponse)
	err := c.cc.Invoke(ctx, "/OrdersConnector/getReturnsOfPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersConnectorClient) GetOrdersbyFullTextSearch(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/OrdersConnector/getOrdersbyFullTextSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersConnectorServer is the server API for OrdersConnector service.
// All implementations must embed UnimplementedOrdersConnectorServer
// for forward compatibility
type OrdersConnectorServer interface {
	// returns an order order UUID
	GetOrder(context.Context, *OrderId) (*Response, error)
	// creates an order
	CreateOrder(context.Context, *OrderRequest) (*CreateResponse, error)
	// gets orders by statusCode
	GetOrdersByStatus(context.Context, *StatusCode) (*Response, error)
	// returns list of orders for given customer Id or external customer Id
	GetOrdersForCustomer(context.Context, *CustomerId) (*Response, error)
	// returns an order for given order Number or invoice Number
	GetOrdersForInvoice(context.Context, *InvoiceNumber) (*Response, error)
	// returns the documents per order like invoice, returnslip
	GetDocumentsPerOrder(context.Context, *InvoiceNumber) (*DocumentResponse, error)
	// returns a specific document per order like invoice, returnslip
	GetSpecificDocumentOfOrder(context.Context, *FileRequest) (*FileResponse, error)
	// returns the log of orderimport
	GetOrderLog(context.Context, *Search) (*OrderLogResponse, error)
	UpdateOrderStatus(context.Context, *StatusUpdateRequest) (*Response, error)
	//checks if there are creditnotes for this position and gives the information back
	GetReturnsOfPosition(context.Context, *OrderpositionSearchRequest) (*OrderpositionReturnsResponse, error)
	GetOrdersbyFullTextSearch(context.Context, *Search) (*Response, error)
	mustEmbedUnimplementedOrdersConnectorServer()
}

// UnimplementedOrdersConnectorServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersConnectorServer struct {
}

func (UnimplementedOrdersConnectorServer) GetOrder(context.Context, *OrderId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrdersConnectorServer) CreateOrder(context.Context, *OrderRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrdersConnectorServer) GetOrdersByStatus(context.Context, *StatusCode) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByStatus not implemented")
}
func (UnimplementedOrdersConnectorServer) GetOrdersForCustomer(context.Context, *CustomerId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersForCustomer not implemented")
}
func (UnimplementedOrdersConnectorServer) GetOrdersForInvoice(context.Context, *InvoiceNumber) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersForInvoice not implemented")
}
func (UnimplementedOrdersConnectorServer) GetDocumentsPerOrder(context.Context, *InvoiceNumber) (*DocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentsPerOrder not implemented")
}
func (UnimplementedOrdersConnectorServer) GetSpecificDocumentOfOrder(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificDocumentOfOrder not implemented")
}
func (UnimplementedOrdersConnectorServer) GetOrderLog(context.Context, *Search) (*OrderLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderLog not implemented")
}
func (UnimplementedOrdersConnectorServer) UpdateOrderStatus(context.Context, *StatusUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedOrdersConnectorServer) GetReturnsOfPosition(context.Context, *OrderpositionSearchRequest) (*OrderpositionReturnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReturnsOfPosition not implemented")
}
func (UnimplementedOrdersConnectorServer) GetOrdersbyFullTextSearch(context.Context, *Search) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersbyFullTextSearch not implemented")
}
func (UnimplementedOrdersConnectorServer) mustEmbedUnimplementedOrdersConnectorServer() {}

// UnsafeOrdersConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersConnectorServer will
// result in compilation errors.
type UnsafeOrdersConnectorServer interface {
	mustEmbedUnimplementedOrdersConnectorServer()
}

func RegisterOrdersConnectorServer(s grpc.ServiceRegistrar, srv OrdersConnectorServer) {
	s.RegisterService(&OrdersConnector_ServiceDesc, srv)
}

func _OrdersConnector_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/getOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).GetOrder(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersConnector_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/createOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).CreateOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersConnector_GetOrdersByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).GetOrdersByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/getOrdersByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).GetOrdersByStatus(ctx, req.(*StatusCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersConnector_GetOrdersForCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).GetOrdersForCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/getOrdersForCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).GetOrdersForCustomer(ctx, req.(*CustomerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersConnector_GetOrdersForInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).GetOrdersForInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/getOrdersForInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).GetOrdersForInvoice(ctx, req.(*InvoiceNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersConnector_GetDocumentsPerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).GetDocumentsPerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/getDocumentsPerOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).GetDocumentsPerOrder(ctx, req.(*InvoiceNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersConnector_GetSpecificDocumentOfOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).GetSpecificDocumentOfOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/getSpecificDocumentOfOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).GetSpecificDocumentOfOrder(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersConnector_GetOrderLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).GetOrderLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/getOrderLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).GetOrderLog(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersConnector_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/updateOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).UpdateOrderStatus(ctx, req.(*StatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersConnector_GetReturnsOfPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderpositionSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).GetReturnsOfPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/getReturnsOfPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).GetReturnsOfPosition(ctx, req.(*OrderpositionSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersConnector_GetOrdersbyFullTextSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersConnectorServer).GetOrdersbyFullTextSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersConnector/getOrdersbyFullTextSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersConnectorServer).GetOrdersbyFullTextSearch(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdersConnector_ServiceDesc is the grpc.ServiceDesc for OrdersConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdersConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrdersConnector",
	HandlerType: (*OrdersConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOrder",
			Handler:    _OrdersConnector_GetOrder_Handler,
		},
		{
			MethodName: "createOrder",
			Handler:    _OrdersConnector_CreateOrder_Handler,
		},
		{
			MethodName: "getOrdersByStatus",
			Handler:    _OrdersConnector_GetOrdersByStatus_Handler,
		},
		{
			MethodName: "getOrdersForCustomer",
			Handler:    _OrdersConnector_GetOrdersForCustomer_Handler,
		},
		{
			MethodName: "getOrdersForInvoice",
			Handler:    _OrdersConnector_GetOrdersForInvoice_Handler,
		},
		{
			MethodName: "getDocumentsPerOrder",
			Handler:    _OrdersConnector_GetDocumentsPerOrder_Handler,
		},
		{
			MethodName: "getSpecificDocumentOfOrder",
			Handler:    _OrdersConnector_GetSpecificDocumentOfOrder_Handler,
		},
		{
			MethodName: "getOrderLog",
			Handler:    _OrdersConnector_GetOrderLog_Handler,
		},
		{
			MethodName: "updateOrderStatus",
			Handler:    _OrdersConnector_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "getReturnsOfPosition",
			Handler:    _OrdersConnector_GetReturnsOfPosition_Handler,
		},
		{
			MethodName: "getOrdersbyFullTextSearch",
			Handler:    _OrdersConnector_GetOrdersbyFullTextSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ordersconnector_plain.proto",
}
